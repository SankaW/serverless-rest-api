service: notes-crud-api
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs20.x
  profile: perpion-sanka
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  # apiGateway:
  #   apiKeys:
  #     - name: api-key-${self:provider.stage}
  #       value: super-secret-api-key-${self:provider.stage}
  #   usagePlan:
  #     quota:
  #       limit: 100
  #       offset: 0
  #       period: DAY
  #     throttle:
  #       burstLimit: 10
  #       rateLimit: 100
  environment:
    NOTES_TABLE_NAME: !Ref notesTable

plugins:
  - serverless-iam-roles-per-function

functions:
  authorizer:
    handler: authorizer.handler

  createNote:
    handler: handler.createNote
    events:
      - http:
          method: post
          path: notes
          authorizer: authorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt notesTable.Arn

  updateNote:
    handler: handler.updateNote
    events:
      - http:
          method: put
          path: notes/{id}
          authorizer: authorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt notesTable.Arn

  deleteNote:
    handler: handler.deleteNote
    events:
      - http:
          method: delete
          path: notes/{id}
          authorizer: authorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt notesTable.Arn

  getNoteById:
    handler: handler.getNoteById
    events:
      - http:
          method: get
          path: notes/{id}
          authorizer: authorizer
    iamRoleStatements:
      - Effect: "Allow"
        Resource: !GetAtt notesTable.Arn
        Action: "dynamodb:GetItem"

  getAllNotes:
    handler: handler.getAllNotes
    events:
      - http:
          method: get
          path: notes/
          #private: true
          authorizer: authorizer
    iamRoleStatements:
      - Effect: "Allow"
        Resource: !GetAtt notesTable.Arn
        Action: "dynamodb:Scan"

# CloudFormation resources
resources:
  Resources:
    notesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: notes
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: notesId
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: notesId
            AttributeType: S
